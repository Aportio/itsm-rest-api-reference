tags:
  - Tickets
summary: Update a single ticket
description: Update the details of a specific ticket in the tickets table.
requestBody:
  content:
    application/json:
      schema:
        type: object
        properties:
          short_title:
            type: string
          long_text:
            type: string
          user_id:
            type: integer
          aportio_id:
            type: string
          customer_id:
            type: integer
          classification:
            type: object
            properties:
              l1:
                type: string
              l2:
                type: string
          status:
            type: string
      examples:
        "Update a ticket's status and classification":
          value: |-
            {
                "user_id"        : 3,
                "customer_id"    : 1,
                "aportio_id"     : "4321",
                "short_title"    : "This is a test",
                "long_text"      : "This is a test",
                "status"         : "CLOSED",
                "classification" : {"l1" : "service-request", "l2" : "hardware"}
            }
responses:
  '200':
    description: Successful PUT request to update a ticket.
    content:
      application/json:
        schema:
          type: object
          properties:
            msg:
              type: string
        examples:
          'Successful PUT request return message':
            value: |
              {
                "msg": "Ok"
              }
  '400':
    description: Bad Request. This usually occurs if there's a missing mandatory key or if
                 a mandatory key is malformed.
    content:
      application/json:
        schema:
          type: object
          properties:
            message:
              type: string
        examples:
          "Mandatory key 'long_text' is missing":
            value: |
              {
                "message": "Bad Request - missing mandatory key(s): long_text"
              }
          "Mandatory key 'classification' is invalid":
            value: |
              {
                "message": "Bad Request - key 'classification': classification needs to be a dictionary"
              }
  '404':
    description: The requested ticket doesn't exist in the database.
    content:
      application/json:
        schema:
          type: object
          properties:
            message:
              type: string
        examples:
          "Trying to update a ticket that doesn't exist":
            value: |
              {
                "message": "ticket '999' not found!"
              }
  '406':
    description: Not Acceptable. This usually means the 'Accept' header isn't set properly. 
                 Acceptable headers are 'application/json' and 'text/html'.
    content:
      application/json:
        schema:
          type: object
          properties:
            message:
              type: string
        examples:
          "Missing/incorrect 'Accept' header":
            value: |
              {
                "message": "The resource identified by the request is only capable of
                            generating response entities which have content characteristics not
                            acceptable according to the accept headers sent in the request.
                            Supported entities are: application/json, text/html"
              }
